{
	"info": {
		"_postman_id": "951e411b-08aa-48d3-b859-cb297e6ee3e5",
		"name": "ReqRes API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36489211"
	},
	"item": [
		{
			"name": "GET Single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify response contains expected data\", function () {",
							"    let jsonData = pm.response.json();",
							"",
							"    // Verify main data fields",
							"    pm.expect(jsonData.data.id).to.eql(2);",
							"    pm.expect(jsonData.data.email).to.eql(\"janet.weaver@reqres.in\");",
							"    pm.expect(jsonData.data.first_name).to.eql(\"Janet\");",
							"    pm.expect(jsonData.data.last_name).to.eql(\"Weaver\");",
							"    pm.expect(jsonData.data.avatar).to.eql(\"https://reqres.in/img/faces/2-image.jpg\");",
							"",
							"    // Verify support section fields",
							"    pm.expect(jsonData.support.url).to.eql(\"https://contentcaddy.io?utm_source=reqres&utm_medium=json&utm_campaign=referral\");",
							"    pm.expect(jsonData.support.text).to.eql(\"Tired of writing endless social media content? Let Content Caddy generate it for you.\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET List Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify response contains expected pagination and user data\", function () {",
							"    let jsonData = pm.response.json();",
							"",
							"    // Verify pagination values",
							"    pm.expect(jsonData.page).to.eql(2);",
							"    pm.expect(jsonData.per_page).to.eql(6);",
							"    pm.expect(jsonData.total).to.eql(12);",
							"    pm.expect(jsonData.total_pages).to.eql(2);",
							"",
							"    // Ensure 'data' array exists and contains 6 items",
							"    pm.expect(jsonData).to.have.property(\"data\");",
							"    pm.expect(jsonData.data).to.be.an(\"array\").that.has.lengthOf(6);",
							"",
							"    // Verify structure of each object in 'data' array",
							"    jsonData.data.forEach(user => {",
							"        pm.expect(user).to.have.all.keys(\"id\", \"email\", \"first_name\", \"last_name\", \"avatar\");",
							"        pm.expect(user.id).to.be.a(\"number\");",
							"        pm.expect(user.email).to.be.a(\"string\").that.includes(\"@reqres.in\");",
							"        pm.expect(user.first_name).to.be.a(\"string\");",
							"        pm.expect(user.last_name).to.be.a(\"string\");",
							"        pm.expect(user.avatar).to.match(/^https:\\/\\/reqres.in\\/img\\/faces\\/\\d+-image\\.jpg$/); // Validate avatar URL format",
							"    });",
							"",
							"    // Verify specific user data",
							"    let expectedUsers = [",
							"        { id: 7, email: \"michael.lawson@reqres.in\", first_name: \"Michael\", last_name: \"Lawson\", avatar: \"https://reqres.in/img/faces/7-image.jpg\" },",
							"        { id: 8, email: \"lindsay.ferguson@reqres.in\", first_name: \"Lindsay\", last_name: \"Ferguson\", avatar: \"https://reqres.in/img/faces/8-image.jpg\" },",
							"        { id: 9, email: \"tobias.funke@reqres.in\", first_name: \"Tobias\", last_name: \"Funke\", avatar: \"https://reqres.in/img/faces/9-image.jpg\" },",
							"        { id: 10, email: \"byron.fields@reqres.in\", first_name: \"Byron\", last_name: \"Fields\", avatar: \"https://reqres.in/img/faces/10-image.jpg\" },",
							"        { id: 11, email: \"george.edwards@reqres.in\", first_name: \"George\", last_name: \"Edwards\", avatar: \"https://reqres.in/img/faces/11-image.jpg\" },",
							"        { id: 12, email: \"rachel.howell@reqres.in\", first_name: \"Rachel\", last_name: \"Howell\", avatar: \"https://reqres.in/img/faces/12-image.jpg\" }",
							"    ];",
							"",
							"    expectedUsers.forEach((expectedUser, index) => {",
							"        pm.expect(jsonData.data[index]).to.deep.eql(expectedUser);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users?page=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Single Resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify response contains expected data\", function () {",
							"    let jsonData = pm.response.json();",
							"",
							"    // Verify 'data' object",
							"    pm.expect(jsonData).to.have.property(\"data\");",
							"    pm.expect(jsonData.data).to.have.all.keys(\"id\", \"name\", \"year\", \"color\", \"pantone_value\");",
							"",
							"    // Validate specific values",
							"    pm.expect(jsonData.data.id).to.eql(2);",
							"    pm.expect(jsonData.data.name).to.eql(\"fuchsia rose\");",
							"    pm.expect(jsonData.data.year).to.eql(2001);",
							"    pm.expect(jsonData.data.color).to.eql(\"#C74375\");",
							"    pm.expect(jsonData.data.pantone_value).to.eql(\"17-2031\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/unknown/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"unknown",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET List Resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify response contains expected pagination and data\", function () {",
							"    let jsonData = pm.response.json();",
							"",
							"    // Verify pagination values",
							"    pm.expect(jsonData.page).to.eql(1);",
							"    pm.expect(jsonData.per_page).to.eql(6);",
							"    pm.expect(jsonData.total).to.eql(12);",
							"    pm.expect(jsonData.total_pages).to.eql(2);",
							"",
							"    // Ensure 'data' array exists and contains 6 items",
							"    pm.expect(jsonData).to.have.property(\"data\");",
							"    pm.expect(jsonData.data).to.be.an(\"array\").that.has.lengthOf(6);",
							"",
							"    // Verify structure of each object in 'data' array",
							"    jsonData.data.forEach(color => {",
							"        pm.expect(color).to.have.all.keys(\"id\", \"name\", \"year\", \"color\", \"pantone_value\");",
							"        pm.expect(color.id).to.be.a(\"number\");",
							"        pm.expect(color.name).to.be.a(\"string\");",
							"        pm.expect(color.year).to.be.a(\"number\");",
							"        pm.expect(color.color).to.match(/^#([A-Fa-f0-9]{6})$/); // Validates HEX color format",
							"        pm.expect(color.pantone_value).to.match(/^\\d{2}-\\d{4}$/); // Validates Pantone format",
							"    });",
							"",
							"    // Verify specific data",
							"    let expectedColors = [",
							"        { id: 1, name: \"cerulean\", year: 2000, color: \"#98B2D1\", pantone_value: \"15-4020\" },",
							"        { id: 2, name: \"fuchsia rose\", year: 2001, color: \"#C74375\", pantone_value: \"17-2031\" },",
							"        { id: 3, name: \"true red\", year: 2002, color: \"#BF1932\", pantone_value: \"19-1664\" },",
							"        { id: 4, name: \"aqua sky\", year: 2003, color: \"#7BC4C4\", pantone_value: \"14-4811\" },",
							"        { id: 5, name: \"tigerlily\", year: 2004, color: \"#E2583E\", pantone_value: \"17-1456\" },",
							"        { id: 6, name: \"blue turquoise\", year: 2005, color: \"#53B0AE\", pantone_value: \"15-5217\" }",
							"    ];",
							"",
							"    expectedColors.forEach((expectedColor, index) => {",
							"        pm.expect(jsonData.data[index]).to.deep.eql(expectedColor);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/unknown",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"unknown"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Delayed Response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify response contains expected pagination and user data\", function () {",
							"    let jsonData = pm.response.json();",
							"",
							"    // Verify pagination values",
							"    pm.expect(jsonData.page).to.eql(1);",
							"    pm.expect(jsonData.per_page).to.eql(6);",
							"    pm.expect(jsonData.total).to.eql(12);",
							"    pm.expect(jsonData.total_pages).to.eql(2);",
							"",
							"    // Ensure 'data' array exists and contains 6 items",
							"    pm.expect(jsonData).to.have.property(\"data\");",
							"    pm.expect(jsonData.data).to.be.an(\"array\").that.has.lengthOf(6);",
							"",
							"    // Verify structure of each object in 'data' array",
							"    jsonData.data.forEach(user => {",
							"        pm.expect(user).to.have.all.keys(\"id\", \"email\", \"first_name\", \"last_name\", \"avatar\");",
							"        pm.expect(user.id).to.be.a(\"number\");",
							"        pm.expect(user.email).to.be.a(\"string\").that.includes(\"@reqres.in\");",
							"        pm.expect(user.first_name).to.be.a(\"string\");",
							"        pm.expect(user.last_name).to.be.a(\"string\");",
							"        pm.expect(user.avatar).to.match(/^https:\\/\\/reqres.in\\/img\\/faces\\/\\d+-image\\.jpg$/); // Validate avatar URL format",
							"    });",
							"",
							"    // Verify specific user data",
							"    let expectedUsers = [",
							"        { id: 1, email: \"george.bluth@reqres.in\", first_name: \"George\", last_name: \"Bluth\", avatar: \"https://reqres.in/img/faces/1-image.jpg\" },",
							"        { id: 2, email: \"janet.weaver@reqres.in\", first_name: \"Janet\", last_name: \"Weaver\", avatar: \"https://reqres.in/img/faces/2-image.jpg\" },",
							"        { id: 3, email: \"emma.wong@reqres.in\", first_name: \"Emma\", last_name: \"Wong\", avatar: \"https://reqres.in/img/faces/3-image.jpg\" },",
							"        { id: 4, email: \"eve.holt@reqres.in\", first_name: \"Eve\", last_name: \"Holt\", avatar: \"https://reqres.in/img/faces/4-image.jpg\" },",
							"        { id: 5, email: \"charles.morris@reqres.in\", first_name: \"Charles\", last_name: \"Morris\", avatar: \"https://reqres.in/img/faces/5-image.jpg\" },",
							"        { id: 6, email: \"tracey.ramos@reqres.in\", first_name: \"Tracey\", last_name: \"Ramos\", avatar: \"https://reqres.in/img/faces/6-image.jpg\" }",
							"    ];",
							"",
							"    expectedUsers.forEach((expectedUser, index) => {",
							"        pm.expect(jsonData.data[index]).to.deep.eql(expectedUser);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users?delay=3",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Single User Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/23",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Single Resource Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/unknown/23",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"unknown",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Register User Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify response contains expected id and token\", function () {",
							"    let jsonData = pm.response.json();",
							"",
							"    // Ensure 'id' and 'token' exist",
							"    pm.expect(jsonData).to.have.all.keys(\"id\", \"token\");",
							"",
							"    // Validate 'id' is a number",
							"    pm.expect(jsonData.id).to.be.a(\"number\").that.eql(4);",
							"",
							"    // Validate 'token' is a string and not empty",
							"    pm.expect(jsonData.token).to.be.a(\"string\").that.is.not.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"pistol\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Register Unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Verify error message for missing password\", function () {",
							"    let jsonData = pm.response.json();",
							"",
							"    // Ensure 'error' key exists",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"",
							"    // Validate 'error' value",
							"    pm.expect(jsonData.error).to.be.a(\"string\").that.eql(\"Missing password\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"sydney@fife\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Login Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify response contains a token\", function () {",
							"    let jsonData = pm.response.json();",
							"",
							"    // Ensure 'token' key exists",
							"    pm.expect(jsonData).to.have.property(\"token\");",
							"",
							"    // Validate 'token' is a non-empty string",
							"    pm.expect(jsonData.token).to.be.a(\"string\").that.is.not.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "",
							"type": "string"
						},
						{
							"key": "username",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"cityslicka\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Login Unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"This test is meant to fail - Missing password\", function () {",
							"    let jsonData = pm.response.json();",
							"",
							"    // Intentionally checking for the wrong error message to make the test fail",
							"    pm.expect(jsonData.error).to.eql(\"Missing password\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "",
							"type": "string"
						},
						{
							"key": "password",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"peter@klaven\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Verify response contains name, job, id, and createdAt\", function () {",
							"    let jsonData = pm.response.json();",
							"",
							"    // Ensure required keys exist",
							"    pm.expect(jsonData).to.have.all.keys(\"name\", \"job\", \"id\", \"createdAt\");",
							"",
							"    // Validate 'name' and 'job' are specific expected values",
							"    pm.expect(jsonData.name).to.eql(\"morpheus\");",
							"    pm.expect(jsonData.job).to.eql(\"leader\");",
							"",
							"    // Validate 'id' exists and is not empty (dynamic value)",
							"    pm.expect(jsonData.id).to.be.a(\"string\").that.is.not.empty;",
							"",
							"    // Validate 'createdAt' exists and follows a timestamp format",
							"    pm.expect(jsonData.createdAt).to.be.a(\"string\").that.is.not.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"leader\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify response contains name, job, and updatedAt\", function () {",
							"    let jsonData = pm.response.json();",
							"",
							"    // Ensure required keys exist",
							"    pm.expect(jsonData).to.have.all.keys(\"name\", \"job\", \"updatedAt\");",
							"",
							"    // Validate 'name' and 'job' are specific expected values",
							"    pm.expect(jsonData.name).to.eql(\"morpheus\");",
							"    pm.expect(jsonData.job).to.eql(\"zion resident\");",
							"",
							"    // Validate 'updatedAt' exists and is not empty (dynamic value)",
							"    pm.expect(jsonData.updatedAt).to.be.a(\"string\").that.is.not.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify response contains name, job, and updatedAt\", function () {",
							"    let jsonData = pm.response.json();",
							"",
							"    // Ensure required keys exist",
							"    pm.expect(jsonData).to.have.all.keys(\"name\", \"job\", \"updatedAt\");",
							"",
							"    // Validate 'name' and 'job' are specific expected values",
							"    pm.expect(jsonData.name).to.eql(\"morpheus\");",
							"    pm.expect(jsonData.job).to.eql(\"zion resident\");",
							"",
							"    // Validate 'updatedAt' exists and is not empty (dynamic value)",
							"    pm.expect(jsonData.updatedAt).to.be.a(\"string\").that.is.not.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://reqres.in/api",
			"type": "string"
		}
	]
}